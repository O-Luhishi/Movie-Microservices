// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieCatalogServiceClient is the client API for MovieCatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieCatalogServiceClient interface {
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	GetMovieList(ctx context.Context, in *GetMovieListRequest, opts ...grpc.CallOption) (*GetMovieListResponse, error)
}

type movieCatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieCatalogServiceClient(cc grpc.ClientConnInterface) MovieCatalogServiceClient {
	return &movieCatalogServiceClient{cc}
}

func (c *movieCatalogServiceClient) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/movie_catalog_service.MovieCatalogService/GetMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieCatalogServiceClient) GetMovieList(ctx context.Context, in *GetMovieListRequest, opts ...grpc.CallOption) (*GetMovieListResponse, error) {
	out := new(GetMovieListResponse)
	err := c.cc.Invoke(ctx, "/movie_catalog_service.MovieCatalogService/GetMovieList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieCatalogServiceServer is the server API for MovieCatalogService service.
// All implementations must embed UnimplementedMovieCatalogServiceServer
// for forward compatibility
type MovieCatalogServiceServer interface {
	GetMovie(context.Context, *GetMovieRequest) (*Movie, error)
	GetMovieList(context.Context, *GetMovieListRequest) (*GetMovieListResponse, error)
	mustEmbedUnimplementedMovieCatalogServiceServer()
}

// UnimplementedMovieCatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieCatalogServiceServer struct {
}

func (UnimplementedMovieCatalogServiceServer) GetMovie(context.Context, *GetMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMovieCatalogServiceServer) GetMovieList(context.Context, *GetMovieListRequest) (*GetMovieListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieList not implemented")
}
func (UnimplementedMovieCatalogServiceServer) mustEmbedUnimplementedMovieCatalogServiceServer() {}

// UnsafeMovieCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieCatalogServiceServer will
// result in compilation errors.
type UnsafeMovieCatalogServiceServer interface {
	mustEmbedUnimplementedMovieCatalogServiceServer()
}

func RegisterMovieCatalogServiceServer(s grpc.ServiceRegistrar, srv MovieCatalogServiceServer) {
	s.RegisterService(&MovieCatalogService_ServiceDesc, srv)
}

func _MovieCatalogService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieCatalogServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_catalog_service.MovieCatalogService/GetMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieCatalogServiceServer).GetMovie(ctx, req.(*GetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieCatalogService_GetMovieList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieCatalogServiceServer).GetMovieList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_catalog_service.MovieCatalogService/GetMovieList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieCatalogServiceServer).GetMovieList(ctx, req.(*GetMovieListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieCatalogService_ServiceDesc is the grpc.ServiceDesc for MovieCatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieCatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie_catalog_service.MovieCatalogService",
	HandlerType: (*MovieCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovie",
			Handler:    _MovieCatalogService_GetMovie_Handler,
		},
		{
			MethodName: "GetMovieList",
			Handler:    _MovieCatalogService_GetMovieList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
